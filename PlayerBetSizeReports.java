package holdemhandhistory;

/*-  ******************************************************************************
 *  @author PEAK_
 ****************************************************************************** */

import java.awt.Dimension;
import java.awt.Font;

import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

public class PlayerBetSizeReports implements Constants {

	/*-******************************************************************************
	 * This class does a bunch of reports using data collected by .
	 * All of the reports in this Class are about Frequency.
	 * All of the reports in this class are for collected data, not calculated results.
	 * 
	 * The basic idea behind these reports is that a players frequencies, if they
	 * deviate from a calculated MDF, that player can be exploited.
	 * The other basic idea is that knowing an opponents frequecies, even if they were
	 * perfect, would allow:
	 * 		The simulator to simulate opponents mucj more accurately.
	 * 		For the simulator to be able to develop stratagies and ranges to be 
	 *		used against these opponents.
	 * 
	 * In any event, with all of this shit there must be a pony in there somewhere.
	 * We will ba analyzing the frequency data to see what ideas develop.
	 * 
	 * The bet size relative to pot size is broken down to 1/4 pot increments. 
	 * 		< 1/4, 1/4+, 1/2+, 3/4+,1+, 1 1/4+, 1 1/2+, 1 3/4+, 2+, Big, All-in
	 * The AllPlayers Class is used to save the data that will be analyzed 
	 * by PlayerBetSize and reported in this reports class.
	 * There are report Classes for bet, call, check, and fold.
	 * 
	 * @author PEAK_
	 ****************************************************************************** */

	// @formatter:off
	private static final Object[] columnsRp = { "Action ", "First", "First HU", "Middle1", "Middle2","Middle3","Middle4","Last", "Last HU" };
	private static final Object[] columnsPos = { "Action ", "SB", "BB", "UTG", "MP", "Cutoff", "Button" };
	private static final Object[] columnsStreets = { "Street", "Preflop", "Flop", "Turn", "River" };
	
	
	 private static final Object[] columnsBet= { "Bet       ","< 1/4 ", "1/4+", "1/2 +"," 3/4 +", "1+","1 1/4+","1 1/2 +","1 3/4 +","2 +","Bigger","Allin"};
	
	
		private static final Object[][] dataBetCallRpPreflop = { 
			{ "Bet 1 ----  ","","","","","","" ,"","","","","","",""},
			{ "First Bet", "","","","","","" ,"","","","","","",""},
			{ "First Call", "","","","","","" ,"","","","","","",""},
			{ "First HU Bet ", "","","","","","" ,"","","","","","",""},
			{ "First HU Call ", "","","","","","" ,"","","","","","",""},
			{ "Middle 1 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 1 Call", "","","","","","" ,"","","","","","",""},
			{ "Middle 2 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 2 Call", "","","","","","" ,"","","","","","",""},
			{ "Middle 3 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 3 Call", "","","","","","" ,"","","","","","",""},
		    { "Middle 4 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 4 Call", "","","","","","" ,"","","","","","",""},
			{ "Last Bet", "","","","","","" ,"","","","","","",""},
			{ "Last Call", "","","","","","" ,"","","","","","",""},
			{ "Last HU Bet", "","","","","","" ,"","","","","","",""},
			{ "Last HU Call", "","","","","","" ,"","","","","","",""},
			{ "Bet 2 ---- ", "","","","","","" ,"","","","","","",""},
			{ "First Bet", "","","","","","" ,"","","","","","",""},
			{ "First Call", "","","","","","" ,"","","","","","",""},
			{ "First HU Bet ", "","","","","","" ,"","","","","","",""},
			{ "First HU Call ", "","","","","","" ,"","","","","","",""},
			{ "Middle 1 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 1 Call", "","","","","","" ,"","","","","","",""},
			{ "Middle 2 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 2 Call", "","","","","","" ,"","","","","","",""},
			{ "Middle 3 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 3 Call", "","","","","","" ,"","","","","","",""},
		    { "Middle 4 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 4 Call", "","","","","","" ,"","","","","","",""},
			{ "Last Bet", "","","","","","" ,"","","","","","",""},
			{ "Last Call", "","","","","","" ,"","","","","","",""},
			{ "Last HU Bet", "","","","","","" ,"","","","","","",""},
			{ "Last HU Call", "","","","","","" ,"","","","","","",""},
			{ "Bet 3 ---- ", "","","","","","" ,"","","","","","",""},
			{ "First Bet", "","","","","","" ,"","","","","","",""},
			{ "First Call", "","","","","","" ,"","","","","","",""},
			{ "First HU Bet ", "","","","","","" ,"","","","","","",""},
			{ "First HU Call ", "","","","","","" ,"","","","","","",""},
			{ "Middle 1 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 1 Call", "","","","","","" ,"","","","","","",""},
			{ "Middle 2 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 2 Call", "","","","","","" ,"","","","","","",""},
			{ "Middle 3 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 3 Call", "","","","","","" ,"","","","","","",""},
		    { "Middle 4 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 4 Call", "","","","","","" ,"","","","","","",""},
			{ "Last Bet", "","","","","","" ,"","","","","","",""},
			{ "Last Call", "","","","","","" ,"","","","","","",""},
			{ "Last HU Bet", "","","","","","" ,"","","","","","",""},
			{ "Last HU Call", "","","","","","" ,"","","","","","",""},
			{ "Bet 4 ---- ", "","","","","","" ,"","","","","","",""},
			{ "First Bet", "","","","","","" ,"","","","","","",""},
			{ "First Call", "","","","","","" ,"","","","","","",""},
			{ "First HU Bet ", "","","","","","" ,"","","","","","",""},
			{ "First HU Call ", "","","","","","" ,"","","","","","",""},
			{ "Middle 1 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 1 Call", "","","","","","" ,"","","","","","",""},
			{ "Middle 2 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 2 Call", "","","","","","" ,"","","","","","",""},
			{ "Middle 3 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 3 Call", "","","","","","" ,"","","","","","",""},
		    { "Middle 4 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 4 Call", "","","","","","" ,"","","","","","",""},
			{ "Last Bet", "","","","","","" ,"","","","","","",""},
			{ "Last Call", "","","","","","" ,"","","","","","",""},
			{ "Last HU Bet", "","","","","","" ,"","","","","","",""},
			{ "Last HU Call", "","","","","","" ,"","","","","","",""},
			{ "","","","","","","" ,"","","","","","",""}};
	private static final Object[][] dataBetCallRpFlop = { 
			{ "Bet 1 ----  ","","","","","","" ,"","","","","","",""},
			{ "First Bet", "","","","","","" ,"","","","","","",""},
			{ "First Call", "","","","","","" ,"","","","","","",""},
			{ "First HU Bet ", "","","","","","" ,"","","","","","",""},
			{ "First HU Call ", "","","","","","" ,"","","","","","",""},
			{ "Middle 1 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 1 Call", "","","","","","" ,"","","","","","",""},
			{ "Middle 2 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 2 Call", "","","","","","" ,"","","","","","",""},
			{ "Middle 3 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 3 Call", "","","","","","" ,"","","","","","",""},
		    { "Middle 4 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 4 Call", "","","","","","" ,"","","","","","",""},
			{ "Last Bet", "","","","","","" ,"","","","","","",""},
			{ "Last Call", "","","","","","" ,"","","","","","",""},
			{ "Last HU Bet", "","","","","","" ,"","","","","","",""},
			{ "Last HU Call", "","","","","","" ,"","","","","","",""},
			{ "Bet 2 ---- ", "","","","","","" ,"","","","","","",""},
			{ "First Bet", "","","","","","" ,"","","","","","",""},
			{ "First Call", "","","","","","" ,"","","","","","",""},
			{ "First HU Bet ", "","","","","","" ,"","","","","","",""},
			{ "First HU Call ", "","","","","","" ,"","","","","","",""},
			{ "Middle 1 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 1 Call", "","","","","","" ,"","","","","","",""},
			{ "Middle 2 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 2 Call", "","","","","","" ,"","","","","","",""},
			{ "Middle 3 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 3 Call", "","","","","","" ,"","","","","","",""},
		    { "Middle 4 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 4 Call", "","","","","","" ,"","","","","","",""},
			{ "Last Bet", "","","","","","" ,"","","","","","",""},
			{ "Last Call", "","","","","","" ,"","","","","","",""},
			{ "Last HU Bet", "","","","","","" ,"","","","","","",""},
			{ "Last HU Call", "","","","","","" ,"","","","","","",""},
			{ "Bet 3 ---- ", "","","","","","" ,"","","","","","",""},
			{ "First Bet", "","","","","","" ,"","","","","","",""},
			{ "First Call", "","","","","","" ,"","","","","","",""},
			{ "First HU Bet ", "","","","","","" ,"","","","","","",""},
			{ "First HU Call ", "","","","","","" ,"","","","","","",""},
			{ "Middle 1 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 1 Call", "","","","","","" ,"","","","","","",""},
			{ "Middle 2 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 2 Call", "","","","","","" ,"","","","","","",""},
			{ "Middle 3 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 3 Call", "","","","","","" ,"","","","","","",""},
		    { "Middle 4 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 4 Call", "","","","","","" ,"","","","","","",""},
			{ "Last Bet", "","","","","","" ,"","","","","","",""},
			{ "Last Call", "","","","","","" ,"","","","","","",""},
			{ "Last HU Bet", "","","","","","" ,"","","","","","",""},
			{ "Last HU Call", "","","","","","" ,"","","","","","",""},
			{ "Bet 4 ---- ", "","","","","","" ,"","","","","","",""},
			{ "First Bet", "","","","","","" ,"","","","","","",""},
			{ "First Call", "","","","","","" ,"","","","","","",""},
			{ "First HU Bet ", "","","","","","" ,"","","","","","",""},
			{ "First HU Call ", "","","","","","" ,"","","","","","",""},
			{ "Middle 1 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 1 Call", "","","","","","" ,"","","","","","",""},
			{ "Middle 2 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 2 Call", "","","","","","" ,"","","","","","",""},
			{ "Middle 3 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 3 Call", "","","","","","" ,"","","","","","",""},
		    { "Middle 4 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 4 Call", "","","","","","" ,"","","","","","",""},
			{ "Last Bet", "","","","","","" ,"","","","","","",""},
			{ "Last Call", "","","","","","" ,"","","","","","",""},
			{ "Last HU Bet", "","","","","","" ,"","","","","","",""},
			{ "Last HU Call", "","","","","","" ,"","","","","","",""},
			{ "","","","","","","" ,"","","","","","",""}};
	private static final Object[][] dataBetCallRpTurn = { 
			{ "Bet 1 ----  ","","","","","","" ,"","","","","","",""},
			{ "First Bet", "","","","","","" ,"","","","","","",""},
			{ "First Call", "","","","","","" ,"","","","","","",""},
			{ "First HU Bet ", "","","","","","" ,"","","","","","",""},
			{ "First HU Call ", "","","","","","" ,"","","","","","",""},
			{ "Middle 1 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 1 Call", "","","","","","" ,"","","","","","",""},
			{ "Middle 2 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 2 Call", "","","","","","" ,"","","","","","",""},
			{ "Middle 3 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 3 Call", "","","","","","" ,"","","","","","",""},
		    { "Middle 4 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 4 Call", "","","","","","" ,"","","","","","",""},
			{ "Last Bet", "","","","","","" ,"","","","","","",""},
			{ "Last Call", "","","","","","" ,"","","","","","",""},
			{ "Last HU Bet", "","","","","","" ,"","","","","","",""},
			{ "Last HU Call", "","","","","","" ,"","","","","","",""},
			{ "Bet 2 ---- ", "","","","","","" ,"","","","","","",""},
			{ "First Bet", "","","","","","" ,"","","","","","",""},
			{ "First Call", "","","","","","" ,"","","","","","",""},
			{ "First HU Bet ", "","","","","","" ,"","","","","","",""},
			{ "First HU Call ", "","","","","","" ,"","","","","","",""},
			{ "Middle 1 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 1 Call", "","","","","","" ,"","","","","","",""},
			{ "Middle 2 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 2 Call", "","","","","","" ,"","","","","","",""},
			{ "Middle 3 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 3 Call", "","","","","","" ,"","","","","","",""},
		    { "Middle 4 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 4 Call", "","","","","","" ,"","","","","","",""},
			{ "Last Bet", "","","","","","" ,"","","","","","",""},
			{ "Last Call", "","","","","","" ,"","","","","","",""},
			{ "Last HU Bet", "","","","","","" ,"","","","","","",""},
			{ "Last HU Call", "","","","","","" ,"","","","","","",""},
			{ "Bet 3 ---- ", "","","","","","" ,"","","","","","",""},
			{ "First Bet", "","","","","","" ,"","","","","","",""},
			{ "First Call", "","","","","","" ,"","","","","","",""},
			{ "First HU Bet ", "","","","","","" ,"","","","","","",""},
			{ "First HU Call ", "","","","","","" ,"","","","","","",""},
			{ "Middle 1 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 1 Call", "","","","","","" ,"","","","","","",""},
			{ "Middle 2 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 2 Call", "","","","","","" ,"","","","","","",""},
			{ "Middle 3 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 3 Call", "","","","","","" ,"","","","","","",""},
		    { "Middle 4 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 4 Call", "","","","","","" ,"","","","","","",""},
			{ "Last Bet", "","","","","","" ,"","","","","","",""},
			{ "Last Call", "","","","","","" ,"","","","","","",""},
			{ "Last HU Bet", "","","","","","" ,"","","","","","",""},
			{ "Last HU Call", "","","","","","" ,"","","","","","",""},
			{ "Bet 4 ---- ", "","","","","","" ,"","","","","","",""},
			{ "First Bet", "","","","","","" ,"","","","","","",""},
			{ "First Call", "","","","","","" ,"","","","","","",""},
			{ "First HU Bet ", "","","","","","" ,"","","","","","",""},
			{ "First HU Call ", "","","","","","" ,"","","","","","",""},
			{ "Middle 1 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 1 Call", "","","","","","" ,"","","","","","",""},
			{ "Middle 2 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 2 Call", "","","","","","" ,"","","","","","",""},
			{ "Middle 3 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 3 Call", "","","","","","" ,"","","","","","",""},
		    { "Middle 4 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 4 Call", "","","","","","" ,"","","","","","",""},
			{ "Last Bet", "","","","","","" ,"","","","","","",""},
			{ "Last Call", "","","","","","" ,"","","","","","",""},
			{ "Last HU Bet", "","","","","","" ,"","","","","","",""},
			{ "Last HU Call", "","","","","","" ,"","","","","","",""},
			{ "","","","","","","" ,"","","","","","",""}};
	private static final Object[][] dataBetCallRpRiver = { 
			{ "Bet 1 ----  ","","","","","","" ,"","","","","","",""},
			{ "First Bet", "","","","","","" ,"","","","","","",""},
			{ "First Call", "","","","","","" ,"","","","","","",""},
			{ "First HU Bet ", "","","","","","" ,"","","","","","",""},
			{ "First HU Call ", "","","","","","" ,"","","","","","",""},
			{ "Middle 1 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 1 Call", "","","","","","" ,"","","","","","",""},
			{ "Middle 2 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 2 Call", "","","","","","" ,"","","","","","",""},
			{ "Middle 3 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 3 Call", "","","","","","" ,"","","","","","",""},
		    { "Middle 4 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 4 Call", "","","","","","" ,"","","","","","",""},
			{ "Last Bet", "","","","","","" ,"","","","","","",""},
			{ "Last Call", "","","","","","" ,"","","","","","",""},
			{ "Last HU Bet", "","","","","","" ,"","","","","","",""},
			{ "Last HU Call", "","","","","","" ,"","","","","","",""},
			{ "Bet 2 ---- ", "","","","","","" ,"","","","","","",""},
			{ "First Bet", "","","","","","" ,"","","","","","",""},
			{ "First Call", "","","","","","" ,"","","","","","",""},
			{ "First HU Bet ", "","","","","","" ,"","","","","","",""},
			{ "First HU Call ", "","","","","","" ,"","","","","","",""},
			{ "Middle 1 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 1 Call", "","","","","","" ,"","","","","","",""},
			{ "Middle 2 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 2 Call", "","","","","","" ,"","","","","","",""},
			{ "Middle 3 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 3 Call", "","","","","","" ,"","","","","","",""},
		    { "Middle 4 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 4 Call", "","","","","","" ,"","","","","","",""},
			{ "Last Bet", "","","","","","" ,"","","","","","",""},
			{ "Last Call", "","","","","","" ,"","","","","","",""},
			{ "Last HU Bet", "","","","","","" ,"","","","","","",""},
			{ "Last HU Call", "","","","","","" ,"","","","","","",""},
			{ "Bet 3 ---- ", "","","","","","" ,"","","","","","",""},
			{ "First Bet", "","","","","","" ,"","","","","","",""},
			{ "First Call", "","","","","","" ,"","","","","","",""},
			{ "First HU Bet ", "","","","","","" ,"","","","","","",""},
			{ "First HU Call ", "","","","","","" ,"","","","","","",""},
			{ "Middle 1 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 1 Call", "","","","","","" ,"","","","","","",""},
			{ "Middle 2 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 2 Call", "","","","","","" ,"","","","","","",""},
			{ "Middle 3 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 3 Call", "","","","","","" ,"","","","","","",""},
		    { "Middle 4 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 4 Call", "","","","","","" ,"","","","","","",""},
			{ "Last Bet", "","","","","","" ,"","","","","","",""},
			{ "Last Call", "","","","","","" ,"","","","","","",""},
			{ "Last HU Bet", "","","","","","" ,"","","","","","",""},
			{ "Last HU Call", "","","","","","" ,"","","","","","",""},
			{ "Bet 4 ---- ", "","","","","","" ,"","","","","","",""},
			{ "First Bet", "","","","","","" ,"","","","","","",""},
			{ "First Call", "","","","","","" ,"","","","","","",""},
			{ "First HU Bet ", "","","","","","" ,"","","","","","",""},
			{ "First HU Call ", "","","","","","" ,"","","","","","",""},
			{ "Middle 1 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 1 Call", "","","","","","" ,"","","","","","",""},
			{ "Middle 2 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 2 Call", "","","","","","" ,"","","","","","",""},
			{ "Middle 3 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 3 Call", "","","","","","" ,"","","","","","",""},
		    { "Middle 4 Bet", "","","","","","" ,"","","","","","",""},
			{ "Middle 4 Call", "","","","","","" ,"","","","","","",""},
			{ "Last Bet", "","","","","","" ,"","","","","","",""},
			{ "Last Call", "","","","","","" ,"","","","","","",""},
			{ "Last HU Bet", "","","","","","" ,"","","","","","",""},
			{ "Last HU Call", "","","","","","" ,"","","","","","",""},
			{ "","","","","","","" ,"","","","","","",""}};
	private static final Object[] columnsBets = { "Street", "Check","Bet 1", "Bet 2", "Bet 3", "Bet 4","all-in"  };
	private static final Object[][] dataBetsByStreet  = { 
			{ "Preflop ---- ","","","","","","" ,"" },
			{ "Average Fold ","","","","","","" ,"" },
			{ "Bet Fold ","","","","","","" ,"" },
			{ "Average Check ","","","","","","" ,"" },
			{ "Bet Check ","","","","","","" ,"" },
			{ "Average Call ","","","","","","" ,"" },
			{ "Bet Call ","","","","","","" ,"" },
			{ "Average bet ","","","","","","" ,"" },
			{ "Bet Bet ","","","","","","" ,"" },
			{ "Fold $ ","","","","","","" ,"" },
			{ "Check $l ","","","","","","" ,"" },
			{ "Call $ ","","","","","","" ,"" },
			{ "Bet $ ","","","","","","" ,"" },
			{ "Flop ---- ","","","","","","" ,"" },
			{ "Average Fold ","","","","","","" ,"" },
			{ "Bet Fold ","","","","","","" ,"" },
			{ "Average Check ","","","","","","" ,"" },
			{ "Bet Check ","","","","","","" ,"" },
			{ "Average Call ","","","","","","" ,"" },
			{ "Bet Call ","","","","","","" ,"" },
			{ "Average bet ","","","","","","" ,"" },
			{ "Bet Bet ","","","","","","" ,"" },
			{ "Fold $ ","","","","","","" ,"" },
			{ "Check $l ","","","","","","" ,"" },
			{ "Call $ ","","","","","","" ,"" },
			{ "Bet $ ","","","","","","" ,"" },
			{ "Turn ---- ","","","","","","" ,"" },
			{ "Average Fold ","","","","","","" ,"" },
			{ "Bet Fold ","","","","","","" ,"" },
			{ "Average Check ","","","","","","" ,"" },
			{ "Bet Check ","","","","","","" ,"" },
			{ "Average Call ","","","","","","" ,"" },
			{ "Bet Call ","","","","","","" ,"" },
			{ "Average bet ","","","","","","" ,"" },
			{ "Bet Bet ","","","","","","" ,"" },
			{ "Fold $ ","","","","","","" ,"" },
			{ "Check $l ","","","","","","" ,"" },
			{ "Call $ ","","","","","","" ,"" },
			{ "Bet $ ","","","","","","" ,"" },
			{ "River ---- ","","","","","","" ,"" },
			{ "Average Fold ","","","","","","" ,"" },
			{ "Bet Fold ","","","","","","" ,"" },
			{ "Average Check ","","","","","","" ,"" },
			{ "Bet Check ","","","","","","" ,"" },
			{ "Average Call ","","","","","","" ,"" },
			{ "Bet Call ","","","","","","" ,"" },
			{ "Average bet ","","","","","","" ,"" },
			{ "Bet Bet ","","","","","","" ,"" },
			{ "Fold $ ","","","","","","" ,"" },
			{ "Check $l ","","","","","","" ,"" },
			{ "Call $ ","","","","","","" ,"" },
			{ "Bet $ ","","","","","","" ,"" },
			{ "  ", "","","","","","" ,"" }};
	

	private static final Object[][] dataBetPreflop = { 
			{ "Bet 1 ----  ", "","","","","","" ,"","","","","","",""},
			{ "Pot Fold ", "","","","","","" ,"","","","","","",""},
			{ "Pot Check ", "","","","","","" ,"","","","","","",""},
			{ "Pot Call ", "","","","","","" ,"","","","","","",""},
			{ "Pot Bet ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Bet ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Bet Count  ", "","","","","","" ,"","","","","","",""},
			{ "Bet IP ", "","","","","","" ,"","","","","","",""},
			{ "Bet OOP ", "","","","","","" ,"","","","","","",""},
			{ "Bet MDF ", "","","","","","" ,"","","","","","",""},
			{ "Bet MDF Count ", "","","","","","" ,"","","","","","",""},
			{ "Pot Fold $ ", "","","","","","" ,"","","","","","",""},
			{ "Pot Check $ ", "","","","","","" ,"","","","","","",""},
			{ "Pot Bet $ ", "","","","","","" ,"","","","","","",""},
			{ "Bet 2----  ", "","","","","","" ,"","","","","","",""},
			{ "Pot Fold ", "","","","","","" ,"","","","","","",""},
			{ "Pot Check ", "","","","","","" ,"","","","","","",""},
			{ "Pot Call ", "","","","","","" ,"","","","","","",""},
			{ "Pot Bet ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Bet ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Bet Count  ", "","","","","","" ,"","","","","","",""},
			{ "Bet IP ", "","","","","","" ,"","","","","","",""},
			{ "Bet OOP ", "","","","","","" ,"","","","","","",""},
			{ "Bet MDF ", "","","","","","" ,"","","","","","",""},
			{ "Bet MDF Count ", "","","","","","" ,"","","","","","",""},
			{ "Pot Fold $ ", "","","","","","" ,"","","","","","",""},
			{ "Pot Check $ ", "","","","","","" ,"","","","","","",""},
			{ "Pot Bet $ ", "","","","","","" ,"","","","","","",""},
			{"Bet 3----  ", "","","","","","" ,"","","","","","",""},
			{ "Pot Fold ", "","","","","","" ,"","","","","","",""},
			{ "Pot Check ", "","","","","","" ,"","","","","","",""},
			{ "Pot Call ", "","","","","","" ,"","","","","","",""},
			{ "Pot Bet ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Bet ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Bet Count  ", "","","","","","" ,"","","","","","",""},
			{ "Bet IP ", "","","","","","" ,"","","","","","",""},
			{ "Bet OOP ", "","","","","","" ,"","","","","","",""},
			{ "Bet MDF ", "","","","","","" ,"","","","","","",""},
			{ "Bet MDF Count ", "","","","","","" ,"","","","","","",""},
			{ "Pot Fold $ ", "","","","","","" ,"","","","","","",""},
			{ "Pot Check $ ", "","","","","","" ,"","","","","","",""},
			{ "Pot Bet $ ", "","","","","","" ,"","","","","","",""},
			{"Bet 4----  ", "","","","","","" ,"","","","","","",""},
			{ "Pot Fold ", "","","","","","" ,"","","","","","",""},
			{"Pot Check ", "","","","","","" ,"","","","","","",""},
			{ "Pot Call ", "","","","","","" ,"","","","","","",""},
			{ "Pot Bet ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Bet ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Bet Count  ", "","","","","","" ,"","","","","","",""},
			{ "Bet IP ", "","","","","","" ,"","","","","","",""},
			{ "Bet OOP ", "","","","","","" ,"","","","","","",""},
			{ "Bet MDF ", "","","","","","" ,"","","","","","",""},
			{ "Bet MDF Count ", "","","","","","" ,"","","","","","",""},
			{ "Pot Fold $ ", "","","","","","" ,"","","","","","",""},
			{ "Pot Check $ ", "","","","","","" ,"","","","","","",""},
			{ "Pot Bet $ ", "","","","","","" ,"","","","","","",""},
			{ "  ", "","","","","","" ,"","","","","","",""}};
	
	private static final Object[][] dataBetFlop = { 
			{ "Bet 1 ----  ", "","","","","","" ,"","","","","","",""},
			{ "Pot Fold ", "","","","","","" ,"","","","","","",""},
			{ "Pot Check ", "","","","","","" ,"","","","","","",""},
			{ "Pot Call ", "","","","","","" ,"","","","","","",""},
			{ "Pot Bet ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Bet ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Bet Count  ", "","","","","","" ,"","","","","","",""},
			{ "Bet IP ", "","","","","","" ,"","","","","","",""},
			{ "Bet OOP ", "","","","","","" ,"","","","","","",""},
			{ "Bet MDF ", "","","","","","" ,"","","","","","",""},
			{ "Bet MDF Count ", "","","","","","" ,"","","","","","",""},
			{ "Pot Fold $ ", "","","","","","" ,"","","","","","",""},
			{ "Pot Check $ ", "","","","","","" ,"","","","","","",""},
			{ "Pot Bet $ ", "","","","","","" ,"","","","","","",""},
			{ "Bet 2----  ", "","","","","","" ,"","","","","","",""},
			{ "Pot Fold ", "","","","","","" ,"","","","","","",""},
			{ "Pot Check ", "","","","","","" ,"","","","","","",""},
			{ "Pot Call ", "","","","","","" ,"","","","","","",""},
			{ "Pot Bet ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Bet ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Bet Count  ", "","","","","","" ,"","","","","","",""},
			{ "Bet IP ", "","","","","","" ,"","","","","","",""},
			{ "Bet OOP ", "","","","","","" ,"","","","","","",""},
			{ "Bet MDF ", "","","","","","" ,"","","","","","",""},
			{ "Bet MDF Count ", "","","","","","" ,"","","","","","",""},
			{ "Pot Fold $ ", "","","","","","" ,"","","","","","",""},
			{ "Pot Check $ ", "","","","","","" ,"","","","","","",""},
			{ "Pot Bet $ ", "","","","","","" ,"","","","","","",""},
			{"Bet 3----  ", "","","","","","" ,"","","","","","",""},
			{ "Pot Fold ", "","","","","","" ,"","","","","","",""},
			{ "Pot Check ", "","","","","","" ,"","","","","","",""},
			{ "Pot Call ", "","","","","","" ,"","","","","","",""},
			{ "Pot Bet ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Bet ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Bet Count  ", "","","","","","" ,"","","","","","",""},
			{ "Bet IP ", "","","","","","" ,"","","","","","",""},
			{ "Bet OOP ", "","","","","","" ,"","","","","","",""},
			{ "Bet MDF ", "","","","","","" ,"","","","","","",""},
			{ "Bet MDF Count ", "","","","","","" ,"","","","","","",""},
			{ "Pot Fold $ ", "","","","","","" ,"","","","","","",""},
			{ "Pot Check $ ", "","","","","","" ,"","","","","","",""},
			{ "Pot Bet $ ", "","","","","","" ,"","","","","","",""},
			{"Bet 4----  ", "","","","","","" ,"","","","","","",""},
			{ "Pot Fold ", "","","","","","" ,"","","","","","",""},
			{"Pot Check ", "","","","","","" ,"","","","","","",""},
			{ "Pot Call ", "","","","","","" ,"","","","","","",""},
			{ "Pot Bet ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Bet ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Bet Count  ", "","","","","","" ,"","","","","","",""},
			{ "Bet IP ", "","","","","","" ,"","","","","","",""},
			{ "Bet OOP ", "","","","","","" ,"","","","","","",""},
			{ "Bet MDF ", "","","","","","" ,"","","","","","",""},
			{ "Bet MDF Count ", "","","","","","" ,"","","","","","",""},
			{ "Pot Fold $ ", "","","","","","" ,"","","","","","",""},
			{ "Pot Check $ ", "","","","","","" ,"","","","","","",""},
			{ "Pot Bet $ ", "","","","","","" ,"","","","","","",""},
			{ "  ", "","","","","","" ,"","","","","","",""}};
	private static final Object[][] dataBetTurn = { 
			{ "Bet 1 ----  ", "","","","","","" ,"","","","","","",""},
			{ "Pot Fold ", "","","","","","" ,"","","","","","",""},
			{ "Pot Check ", "","","","","","" ,"","","","","","",""},
			{ "Pot Call ", "","","","","","" ,"","","","","","",""},
			{ "Pot Bet ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Bet ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Bet Count  ", "","","","","","" ,"","","","","","",""},
			{ "Bet IP ", "","","","","","" ,"","","","","","",""},
			{ "Bet OOP ", "","","","","","" ,"","","","","","",""},
			{ "Bet MDF ", "","","","","","" ,"","","","","","",""},
			{ "Bet MDF Count ", "","","","","","" ,"","","","","","",""},
			{ "Pot Fold $ ", "","","","","","" ,"","","","","","",""},
			{ "Pot Check $ ", "","","","","","" ,"","","","","","",""},
			{ "Pot Bet $ ", "","","","","","" ,"","","","","","",""},
			{ "Bet 2----  ", "","","","","","" ,"","","","","","",""},
			{ "Pot Fold ", "","","","","","" ,"","","","","","",""},
			{ "Pot Check ", "","","","","","" ,"","","","","","",""},
			{ "Pot Call ", "","","","","","" ,"","","","","","",""},
			{ "Pot Bet ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Bet ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Bet Count  ", "","","","","","" ,"","","","","","",""},
			{ "Bet IP ", "","","","","","" ,"","","","","","",""},
			{ "Bet OOP ", "","","","","","" ,"","","","","","",""},
			{ "Bet MDF ", "","","","","","" ,"","","","","","",""},
			{ "Bet MDF Count ", "","","","","","" ,"","","","","","",""},
			{ "Pot Fold $ ", "","","","","","" ,"","","","","","",""},
			{ "Pot Check $ ", "","","","","","" ,"","","","","","",""},
			{ "Pot Bet $ ", "","","","","","" ,"","","","","","",""},
			{"Bet 3----  ", "","","","","","" ,"","","","","","",""},
			{ "Pot Fold ", "","","","","","" ,"","","","","","",""},
			{ "Pot Check ", "","","","","","" ,"","","","","","",""},
			{ "Pot Call ", "","","","","","" ,"","","","","","",""},
			{ "Pot Bet ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Bet ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Bet Count  ", "","","","","","" ,"","","","","","",""},
			{ "Bet IP ", "","","","","","" ,"","","","","","",""},
			{ "Bet OOP ", "","","","","","" ,"","","","","","",""},
			{ "Bet MDF ", "","","","","","" ,"","","","","","",""},
			{ "Bet MDF Count ", "","","","","","" ,"","","","","","",""},
			{ "Pot Fold $ ", "","","","","","" ,"","","","","","",""},
			{ "Pot Check $ ", "","","","","","" ,"","","","","","",""},
			{ "Pot Bet $ ", "","","","","","" ,"","","","","","",""},
			{"Bet 4----  ", "","","","","","" ,"","","","","","",""},
			{ "Pot Fold ", "","","","","","" ,"","","","","","",""},
			{"Pot Check ", "","","","","","" ,"","","","","","",""},
			{ "Pot Call ", "","","","","","" ,"","","","","","",""},
			{ "Pot Bet ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Bet ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Bet Count  ", "","","","","","" ,"","","","","","",""},
			{ "Bet IP ", "","","","","","" ,"","","","","","",""},
			{ "Bet OOP ", "","","","","","" ,"","","","","","",""},
			{ "Bet MDF ", "","","","","","" ,"","","","","","",""},
			{ "Bet MDF Count ", "","","","","","" ,"","","","","","",""},
			{ "Pot Fold $ ", "","","","","","" ,"","","","","","",""},
			{ "Pot Check $ ", "","","","","","" ,"","","","","","",""},
			{ "Pot Bet $ ", "","","","","","" ,"","","","","","",""},
			{ "  ", "","","","","","" ,"","","","","","",""}};
	private static final Object[][] dataBetRiver = { 
			{ "Bet 1 ----  ", "","","","","","" ,"","","","","","",""},
			{ "Pot Fold ", "","","","","","" ,"","","","","","",""},
			{ "Pot Check ", "","","","","","" ,"","","","","","",""},
			{ "Pot Call ", "","","","","","" ,"","","","","","",""},
			{ "Pot Bet ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Bet ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Bet Count  ", "","","","","","" ,"","","","","","",""},
			{ "Bet IP ", "","","","","","" ,"","","","","","",""},
			{ "Bet OOP ", "","","","","","" ,"","","","","","",""},
			{ "Bet MDF ", "","","","","","" ,"","","","","","",""},
			{ "Bet MDF Count ", "","","","","","" ,"","","","","","",""},
			{ "Pot Fold $ ", "","","","","","" ,"","","","","","",""},
			{ "Pot Check $ ", "","","","","","" ,"","","","","","",""},
			{ "Pot Bet $ ", "","","","","","" ,"","","","","","",""},
			{ "Bet 2----  ", "","","","","","" ,"","","","","","",""},
			{ "Pot Fold ", "","","","","","" ,"","","","","","",""},
			{ "Pot Check ", "","","","","","" ,"","","","","","",""},
			{ "Pot Call ", "","","","","","" ,"","","","","","",""},
			{ "Pot Bet ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Bet ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Bet Count  ", "","","","","","" ,"","","","","","",""},
			{ "Bet IP ", "","","","","","" ,"","","","","","",""},
			{ "Bet OOP ", "","","","","","" ,"","","","","","",""},
			{ "Bet MDF ", "","","","","","" ,"","","","","","",""},
			{ "Bet MDF Count ", "","","","","","" ,"","","","","","",""},
			{ "Pot Fold $ ", "","","","","","" ,"","","","","","",""},
			{ "Pot Check $ ", "","","","","","" ,"","","","","","",""},
			{ "Pot Bet $ ", "","","","","","" ,"","","","","","",""},
			{"Bet 3----  ", "","","","","","" ,"","","","","","",""},
			{ "Pot Fold ", "","","","","","" ,"","","","","","",""},
			{ "Pot Check ", "","","","","","" ,"","","","","","",""},
			{ "Pot Call ", "","","","","","" ,"","","","","","",""},
			{ "Pot Bet ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Bet ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Bet Count  ", "","","","","","" ,"","","","","","",""},
			{ "Bet IP ", "","","","","","" ,"","","","","","",""},
			{ "Bet OOP ", "","","","","","" ,"","","","","","",""},
			{ "Bet MDF ", "","","","","","" ,"","","","","","",""},
			{ "Bet MDF Count ", "","","","","","" ,"","","","","","",""},
			{ "Pot Fold $ ", "","","","","","" ,"","","","","","",""},
			{ "Pot Check $ ", "","","","","","" ,"","","","","","",""},
			{ "Pot Bet $ ", "","","","","","" ,"","","","","","",""},
			{"Bet 4----  ", "","","","","","" ,"","","","","","",""},
			{ "Pot Fold ", "","","","","","" ,"","","","","","",""},
			{"Pot Check ", "","","","","","" ,"","","","","","",""},
			{ "Pot Call ", "","","","","","" ,"","","","","","",""},
			{ "Pot Bet ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Bet ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Bet Count  ", "","","","","","" ,"","","","","","",""},
			{ "Bet IP ", "","","","","","" ,"","","","","","",""},
			{ "Bet OOP ", "","","","","","" ,"","","","","","",""},
			{ "Bet MDF ", "","","","","","" ,"","","","","","",""},
			{ "Bet MDF Count ", "","","","","","" ,"","","","","","",""},
			{ "Pot Fold $ ", "","","","","","" ,"","","","","","",""},
			{ "Pot Check $ ", "","","","","","" ,"","","","","","",""},
			{ "Pot Bet $ ", "","","","","","" ,"","","","","","",""},
			{ "  ", "","","","","","" ,"","","","","","",""}};

	 private static final Object[] columnsCall= { "Bet       ","< 1/4 ", "1/4+", "1/2 +"," 3/4 +", "1+","1 1/4+","1 1/2 +","1 3/4 +","2 +","Bigger","Allin"};
	private static final Object[][] dataCallPreflop = { 
			{ "Bet 1 ----  ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Call ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Call Count ", "","","","","","" ,"","","","","","",""},
			{ "Call IP ", "","","","","","" ,"","","","","","",""},
			{ "Call OOP ", "","","","","","" ,"","","","","","",""},
			{ " Call MDF ", "","","","","","" ,"","","","","","",""},
			{ "Call MDF Count", "","","","","","" ,"","","","","","",""},
			{ "Pot Call $", "","","","","","" ,"","","","","","",""},
			{ "Bet 2 ----  ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Call ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Call Count ", "","","","","","" ,"","","","","","",""},
			{ "Call IP ", "","","","","","" ,"","","","","","",""},
			{ "Call OOP ", "","","","","","" ,"","","","","","",""},
			{ " Call MDF ", "","","","","","" ,"","","","","","",""},
			{ "Call MDF Count", "","","","","","" ,"","","","","","",""},
			{ "Pot Call $", "","","","","","" ,"","","","","","",""},
			{ "Bet 3 ----  ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Call ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Call Count ", "","","","","","" ,"","","","","","",""},
			{ "Call IP ", "","","","","","" ,"","","","","","",""},
			{ "Call OOP ", "","","","","","" ,"","","","","","",""},
			{ " Call MDF ", "","","","","","" ,"","","","","","",""},
			{ "Call MDF Count", "","","","","","" ,"","","","","","",""},
			{ "Pot Call $", "","","","","","" ,"","","","","","",""},
			{ "Bet 4 ----  ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Call ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Call Count ", "","","","","","" ,"","","","","","",""},
			{ "Call IP ", "","","","","","" ,"","","","","","",""},
			{ "Call OOP ", "","","","","","" ,"","","","","","",""},
			{ " Call MDF ", "","","","","","" ,"","","","","","",""},
			{ "Call MDF Count", "","","","","","" ,"","","","","","",""},
			{ "Pot Call $", "","","","","","" ,"","","","","","",""}};
	
	private static final Object[][] dataCallFlop = { 
			{ "Bet 1 ----  ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Call ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Call Count ", "","","","","","" ,"","","","","","",""},
			{ "Call IP ", "","","","","","" ,"","","","","","",""},
			{ "Call OOP ", "","","","","","" ,"","","","","","",""},
			{ " Call MDF ", "","","","","","" ,"","","","","","",""},
			{ "Call MDF Count", "","","","","","" ,"","","","","","",""},
			{ "Pot Call $", "","","","","","" ,"","","","","","",""},
			{ "Bet 2 ----  ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Call ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Call Count ", "","","","","","" ,"","","","","","",""},
			{ "Call IP ", "","","","","","" ,"","","","","","",""},
			{ "Call OOP ", "","","","","","" ,"","","","","","",""},
			{ " Call MDF ", "","","","","","" ,"","","","","","",""},
			{ "Call MDF Count", "","","","","","" ,"","","","","","",""},
			{ "Pot Call $", "","","","","","" ,"","","","","","",""},
			{ "Bet 3 ----  ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Call ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Call Count ", "","","","","","" ,"","","","","","",""},
			{ "Call IP ", "","","","","","" ,"","","","","","",""},
			{ "Call OOP ", "","","","","","" ,"","","","","","",""},
			{ " Call MDF ", "","","","","","" ,"","","","","","",""},
			{ "Call MDF Count", "","","","","","" ,"","","","","","",""},
			{ "Pot Call $", "","","","","","" ,"","","","","","",""},
			{ "Bet 4 ----  ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Call ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Call Count ", "","","","","","" ,"","","","","","",""},
			{ "Call IP ", "","","","","","" ,"","","","","","",""},
			{ "Call OOP ", "","","","","","" ,"","","","","","",""},
			{ " Call MDF ", "","","","","","" ,"","","","","","",""},
			{ "Call MDF Count", "","","","","","" ,"","","","","","",""},
			{ "Pot Call $", "","","","","","" ,"","","","","","",""}};
	
	private static final Object[][] dataCallTurn = { 
			{ "Bet 1 ----  ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Call ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Call Count ", "","","","","","" ,"","","","","","",""},
			{ "Call IP ", "","","","","","" ,"","","","","","",""},
			{ "Call OOP ", "","","","","","" ,"","","","","","",""},
			{ " Call MDF ", "","","","","","" ,"","","","","","",""},
			{ "Call MDF Count", "","","","","","" ,"","","","","","",""},
			{ "Pot Call $", "","","","","","" ,"","","","","","",""},
			{ "Bet 2 ----  ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Call ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Call Count ", "","","","","","" ,"","","","","","",""},
			{ "Call IP ", "","","","","","" ,"","","","","","",""},
			{ "Call OOP ", "","","","","","" ,"","","","","","",""},
			{ " Call MDF ", "","","","","","" ,"","","","","","",""},
			{ "Call MDF Count", "","","","","","" ,"","","","","","",""},
			{ "Pot Call $", "","","","","","" ,"","","","","","",""},
			{ "Bet 3 ----  ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Call ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Call Count ", "","","","","","" ,"","","","","","",""},
			{ "Call IP ", "","","","","","" ,"","","","","","",""},
			{ "Call OOP ", "","","","","","" ,"","","","","","",""},
			{ " Call MDF ", "","","","","","" ,"","","","","","",""},
			{ "Call MDF Count", "","","","","","" ,"","","","","","",""},
			{ "Pot Call $", "","","","","","" ,"","","","","","",""},
			{ "Bet 4 ----  ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Call ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Call Count ", "","","","","","" ,"","","","","","",""},
			{ "Call IP ", "","","","","","" ,"","","","","","",""},
			{ "Call OOP ", "","","","","","" ,"","","","","","",""},
			{ " Call MDF ", "","","","","","" ,"","","","","","",""},
			{ "Call MDF Count", "","","","","","" ,"","","","","","",""},
			{ "Pot Call $", "","","","","","" ,"","","","","","",""}};
	
	private static final Object[][] dataCallRiver = { 
			{ "Bet 1 ----  ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Call ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Call Count ", "","","","","","" ,"","","","","","",""},
			{ "Call IP ", "","","","","","" ,"","","","","","",""},
			{ "Call OOP ", "","","","","","" ,"","","","","","",""},
			{ " Call MDF ", "","","","","","" ,"","","","","","",""},
			{ "Call MDF Count", "","","","","","" ,"","","","","","",""},
			{ "Pot Call $", "","","","","","" ,"","","","","","",""},
			{ "Bet 2 ----  ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Call ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Call Count ", "","","","","","" ,"","","","","","",""},
			{ "Call IP ", "","","","","","" ,"","","","","","",""},
			{ "Call OOP ", "","","","","","" ,"","","","","","",""},
			{ " Call MDF ", "","","","","","" ,"","","","","","",""},
			{ "Call MDF Count", "","","","","","" ,"","","","","","",""},
			{ "Pot Call $", "","","","","","" ,"","","","","","",""},
			{ "Bet 3 ----  ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Call ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Call Count ", "","","","","","" ,"","","","","","",""},
			{ "Call IP ", "","","","","","" ,"","","","","","",""},
			{ "Call OOP ", "","","","","","" ,"","","","","","",""},
			{ " Call MDF ", "","","","","","" ,"","","","","","",""},
			{ "Call MDF Count", "","","","","","" ,"","","","","","",""},
			{ "Pot Call $", "","","","","","" ,"","","","","","",""},
			{ "Bet 4 ----  ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Call ", "","","","","","" ,"","","","","","",""},
			{ "Pot Odds Call Count ", "","","","","","" ,"","","","","","",""},
			{ "Call IP ", "","","","","","" ,"","","","","","",""},
			{ "Call OOP ", "","","","","","" ,"","","","","","",""},
			{ " Call MDF ", "","","","","","" ,"","","","","","",""},
			{ "Call MDF Count", "","","","","","" ,"","","","","","",""},
			{ "Pot Call $", "","","","","","" ,"","","","","","",""}};

	 private static final Object[] columnsFreqSteps= { "Bet       ","< 1/4 ", "1/4+", "1/2 +"," 3/4 +", "1+","1 1/4+","1 1/2 +","1 3/4 +","2 +","Bigger","Allin"};
		private static final Object[][] dataFreqStepsPreflop = { 
				{ "Bet1   ", "","","","","","" ,"","","","","","",""},
				{ "Fold            ", "","","","","","" ,"","","","","","",""},
				{ "Call            ", "","","","","","" ,"","","","","","",""},
				{ "Raise            ", "","","","","","" ,"","","","","","",""},
				{ "            ", "","","","","","" ,"","","","","","",""},
				{ "Bet2   ", "","","","","","" ,"","","","","","",""},
				{ "Fold            ", "","","","","","" ,"","","","","","",""},
				{ "Call            ", "","","","","","" ,"","","","","","",""},
				{ "Raise            ", "","","","","","" ,"","","","","","",""},
				{ "            ", "","","","","","" ,"","","","","","",""},
				{ "Bet3   ", "","","","","","" ,"","","","","","",""},
				{ "Fold            ", "","","","","","" ,"","","","","","",""},
				{ "Call            ", "","","","","","" ,"","","","","","",""},
				{ "Raise            ", "","","","","","" ,"","","","","","",""},
				{ "            ", "","","","","","" ,"","","","","","",""},
				{ "Bet4   ", "","","","","","" ,"","","","","","",""},
				{ "Fold            ", "","","","","","" ,"","","","","","",""},
				{ "Call            ", "","","","","","" ,"","","","","","",""},
				{ "Raise            ", "","","","","","" ,"","","","","","",""},
				{ "            ", "","","","","","" ,"","","","","","",""},};
		
		private static final Object[][] dataFreqStepsFlop = { 
				{ "Bet1   ", "","","","","","" ,"","","","","","",""},
				{ "Fold            ", "","","","","","" ,"","","","","","",""},
				{ "Call            ", "","","","","","" ,"","","","","","",""},
				{ "Raise            ", "","","","","","" ,"","","","","","",""},
				{ "            ", "","","","","","" ,"","","","","","",""},
				{ "Bet2   ", "","","","","","" ,"","","","","","",""},
				{ "Fold            ", "","","","","","" ,"","","","","","",""},
				{ "Call            ", "","","","","","" ,"","","","","","",""},
				{ "Raise            ", "","","","","","" ,"","","","","","",""},
				{ "            ", "","","","","","" ,"","","","","","",""},
				{ "Bet3   ", "","","","","","" ,"","","","","","",""},
				{ "Fold            ", "","","","","","" ,"","","","","","",""},
				{ "Call            ", "","","","","","" ,"","","","","","",""},
				{ "Raise            ", "","","","","","" ,"","","","","","",""},
				{ "            ", "","","","","","" ,"","","","","","",""},
				{ "Bet4   ", "","","","","","" ,"","","","","","",""},
				{ "Fold            ", "","","","","","" ,"","","","","","",""},
				{ "Call            ", "","","","","","" ,"","","","","","",""},
				{ "Raise            ", "","","","","","" ,"","","","","","",""},
				{ "            ", "","","","","","" ,"","","","","","",""},};
		private static final Object[][] dataFreqStepsTurn = { 
				{ "Bet1   ", "","","","","","" ,"","","","","","",""},
				{ "Fold            ", "","","","","","" ,"","","","","","",""},
				{ "Call            ", "","","","","","" ,"","","","","","",""},
				{ "Raise            ", "","","","","","" ,"","","","","","",""},
				{ "            ", "","","","","","" ,"","","","","","",""},
				{ "Bet2   ", "","","","","","" ,"","","","","","",""},
				{ "Fold            ", "","","","","","" ,"","","","","","",""},
				{ "Call            ", "","","","","","" ,"","","","","","",""},
				{ "Raise            ", "","","","","","" ,"","","","","","",""},
				{ "            ", "","","","","","" ,"","","","","","",""},
				{ "Bet3   ", "","","","","","" ,"","","","","","",""},
				{ "Fold            ", "","","","","","" ,"","","","","","",""},
				{ "Call            ", "","","","","","" ,"","","","","","",""},
				{ "Raise            ", "","","","","","" ,"","","","","","",""},
				{ "            ", "","","","","","" ,"","","","","","",""},
				{ "Bet4   ", "","","","","","" ,"","","","","","",""},
				{ "Fold            ", "","","","","","" ,"","","","","","",""},
				{ "Call            ", "","","","","","" ,"","","","","","",""},
				{ "Raise            ", "","","","","","" ,"","","","","","",""},
				{ "            ", "","","","","","" ,"","","","","","",""},};
		private static final Object[][] dataFreqStepsRiver = { 
				{ "Bet1   ", "","","","","","" ,"","","","","","",""},
				{ "Fold            ", "","","","","","" ,"","","","","","",""},
				{ "Call            ", "","","","","","" ,"","","","","","",""},
				{ "Raise            ", "","","","","","" ,"","","","","","",""},
				{ "            ", "","","","","","" ,"","","","","","",""},
				{ "Bet2   ", "","","","","","" ,"","","","","","",""},
				{ "Fold            ", "","","","","","" ,"","","","","","",""},
				{ "Call            ", "","","","","","" ,"","","","","","",""},
				{ "Raise            ", "","","","","","" ,"","","","","","",""},
				{ "            ", "","","","","","" ,"","","","","","",""},
				{ "Bet3   ", "","","","","","" ,"","","","","","",""},
				{ "Fold            ", "","","","","","" ,"","","","","","",""},
				{ "Call            ", "","","","","","" ,"","","","","","",""},
				{ "Raise            ", "","","","","","" ,"","","","","","",""},
				{ "            ", "","","","","","" ,"","","","","","",""},
				{ "Bet4   ", "","","","","","" ,"","","","","","",""},
				{ "Fold            ", "","","","","","" ,"","","","","","",""},
				{ "Call            ", "","","","","","" ,"","","","","","",""},
				{ "Raise            ", "","","","","","" ,"","","","","","",""},
				{ "            ", "","","","","","" ,"","","","","","",""},};
		
	// @formatter:on

	static boolean betCallRpPreflopGUI = false;

	static void betCallRpPreflop(PlayerBetSize pbs) {
		JTable table = null;
		if (!betCallRpPreflopGUI) {
			betCallRpPreflopGUI = true;
			final var ff = new Font(Font.SERIF, Font.BOLD, 18);
			final var frame = new JFrame("Preflop Bets and Calls Relative Position");
			frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
			frame.setLocation(70, 70);
			frame.setPreferredSize(new Dimension(1000, 1200));
			final var tableModel = new DefaultTableModel(dataBetCallRpPreflop, columnsFreqSteps);
			table = new JTable(tableModel);
			table.setFont(ff);
			table.setRowHeight(30);
			// Create a custom cell renderer to set the font to bold 18.
			DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
			renderer.setFont(new Font(Font.SERIF, Font.BOLD, 18));

			// Apply the custom cell renderer to all table cells.
			for (int i = 0; i < table.getColumnCount(); i++) {
				table.getColumnModel().getColumn(i).setCellRenderer(renderer);
			}
			final var pane = new JScrollPane(table);
			table.getColumnModel().getColumn(0).setPreferredWidth(120);
			frame.add(pane);
			frame.pack();
			frame.setVisible(true);
		}

		int street = PREFLOP;
		int row = 1;
		int col = 1;
		int bet = 0;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][0]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][0]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][1]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][1]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][2]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][2]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][3]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][3]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][4]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][4]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][5]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][5]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][6]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][6]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][7]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][7]), row, col++);
			row = 1;
		}
		row = 18;
		col = 1;
		bet = 1;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][0]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][0]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][1]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][1]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][2]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][2]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][3]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][3]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][4]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][4]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][5]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][5]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][6]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][6]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][7]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][7]), row, col++);
			row = 18;
		}
		row = 36;
		col = 1;
		bet = 2;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][0]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][0]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][1]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][1]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][2]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][2]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][3]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][3]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][4]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][4]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][5]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][5]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][6]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][6]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][7]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][7]), row, col++);
			row = 36;
		}
		row = 52;
		col = 1;
		bet = 3;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][0]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][0]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][1]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][1]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][2]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][2]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][3]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][3]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][4]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][4]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][5]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][5]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][6]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][6]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][7]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][7]), row, col++);
			row = 52;
		}
	}

	static boolean betCallRpFlopGUI = false;

	static void betCallRpFlop(PlayerBetSize pbs) {
		JTable table = null;
		if (!betCallRpFlopGUI) {
			betCallRpFlopGUI = true;
			final var ff = new Font(Font.SERIF, Font.BOLD, 18);
			final var frame = new JFrame("Flop Bets and Calls Relative Position");
			frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
			frame.setLocation(90, 90);
			frame.setPreferredSize(new Dimension(1000, 1200));
			final var tableModel = new DefaultTableModel(dataBetCallRpFlop, columnsFreqSteps);
			table = new JTable(tableModel);
			table.setFont(ff);
			table.setRowHeight(30);
			// Create a custom cell renderer to set the font to bold 18.
			DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
			renderer.setFont(new Font(Font.SERIF, Font.BOLD, 18));

			// Apply the custom cell renderer to all table cells.
			for (int i = 0; i < table.getColumnCount(); i++) {
				table.getColumnModel().getColumn(i).setCellRenderer(renderer);
			}
			final var pane = new JScrollPane(table);
			table.getColumnModel().getColumn(0).setPreferredWidth(120);
			frame.add(pane);
			frame.pack();
			frame.setVisible(true);
		}

		int street = FLOP;
		int row = 1;
		int col = 1;
		int bet = 0;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][0]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][0]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][1]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][1]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][2]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][2]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][3]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][3]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][4]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][4]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][5]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][5]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][6]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][6]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][7]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][7]), row, col++);
			row = 1;
		}
		row = 18;
		col = 1;
		bet = 1;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][0]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][0]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][1]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][1]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][2]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][2]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][3]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][3]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][4]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][4]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][5]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][5]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][6]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][6]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][7]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][7]), row, col++);
			row = 18;
		}
		row = 36;
		col = 1;
		bet = 2;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][0]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][0]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][1]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][1]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][2]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][2]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][3]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][3]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][4]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][4]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][5]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][5]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][6]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][6]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][7]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][7]), row, col++);
			row = 36;
		}
		row = 52;
		col = 1;
		bet = 3;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][0]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][0]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][1]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][1]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][2]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][2]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][3]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][3]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][4]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][4]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][5]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][5]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][6]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][6]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][7]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][7]), row, col++);
			row = 52;
		}
	}

	static boolean betCallRpTurnGUI = false;

	static void betCallRpTurn(PlayerBetSize pbs) {
		JTable table = null;
		if (!betCallRpTurnGUI) {
			betCallRpTurnGUI = true;
			final var ff = new Font(Font.SERIF, Font.BOLD, 18);
			final var frame = new JFrame("Turn Bets and Calls Relative Position");
			frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
			frame.setLocation(120, 120);
			frame.setPreferredSize(new Dimension(1000, 1200));
			final var tableModel = new DefaultTableModel(dataBetCallRpTurn, columnsFreqSteps);
			table = new JTable(tableModel);
			table.setFont(ff);
			table.setRowHeight(30);
			// Create a custom cell renderer to set the font to bold 18.
			DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
			renderer.setFont(new Font(Font.SERIF, Font.BOLD, 18));

			// Apply the custom cell renderer to all table cells.
			for (int i = 0; i < table.getColumnCount(); i++) {
				table.getColumnModel().getColumn(i).setCellRenderer(renderer);
			}
			final var pane = new JScrollPane(table);
			table.getColumnModel().getColumn(0).setPreferredWidth(120);
			frame.add(pane);
			frame.pack();
			frame.setVisible(true);
		}

		int street = TURN;
		int row = 1;
		int col = 1;
		int bet = 0;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][0]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][0]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][1]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][1]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][2]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][2]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][3]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][3]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][4]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][4]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][5]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][5]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][6]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][6]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][7]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][7]), row, col++);
			row = 1;
		}
		row = 18;
		col = 1;
		bet = 1;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][0]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][0]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][1]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][1]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][2]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][2]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][3]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][3]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][4]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][4]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][5]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][5]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][6]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][6]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][7]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][7]), row, col++);
			row = 18;
		}
		row = 36;
		col = 1;
		bet = 2;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][0]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][0]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][1]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][1]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][2]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][2]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][3]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][3]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][4]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][4]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][5]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][5]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][6]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][6]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][7]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][7]), row, col++);
			row = 36;
		}
		row = 52;
		col = 1;
		bet = 3;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][0]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][0]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][1]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][1]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][2]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][2]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][3]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][3]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][4]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][4]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][5]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][5]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][6]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][6]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][7]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][7]), row, col++);
			row = 52;
		}
	}

	static boolean betCallRpRiverGUI = false;

	static void betCallRpRiver(PlayerBetSize pbs) {
		JTable table = null;
		if (!betCallRpRiverGUI) {
			betCallRpRiverGUI = true;
			final var ff = new Font(Font.SERIF, Font.BOLD, 18);
			final var frame = new JFrame("River Bets and Calls Relative Position");
			frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
			frame.setLocation(140, 140);
			frame.setPreferredSize(new Dimension(1000, 1200));
			final var tableModel = new DefaultTableModel(dataBetCallRpRiver, columnsFreqSteps);
			table = new JTable(tableModel);
			table.setFont(ff);
			table.setRowHeight(30);
			// Create a custom cell renderer to set the font to bold 18.
			DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
			renderer.setFont(new Font(Font.SERIF, Font.BOLD, 18));

			// Apply the custom cell renderer to all table cells.
			for (int i = 0; i < table.getColumnCount(); i++) {
				table.getColumnModel().getColumn(i).setCellRenderer(renderer);
			}
			final var pane = new JScrollPane(table);
			table.getColumnModel().getColumn(0).setPreferredWidth(120);
			frame.add(pane);
			frame.pack();
			frame.setVisible(true);
		}

		int street = RIVER;
		int row = 1;
		int col = 1;
		int bet = 0;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][0]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][0]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][1]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][1]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][2]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][2]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][3]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][3]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][4]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][4]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][5]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][5]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][6]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][6]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][7]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][7]), row, col++);
			row = 1;
		}
		row = 18;
		col = 1;
		bet = 1;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][0]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][0]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][1]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][1]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][2]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][2]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][3]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][3]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][4]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][4]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][5]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][5]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][6]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][6]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][7]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][7]), row, col++);
			row = 18;
		}
		row = 36;
		col = 1;
		bet = 2;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][0]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][0]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][1]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][1]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][2]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][2]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][3]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][3]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][4]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][4]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][5]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][5]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][6]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][6]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][7]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][7]), row, col++);
			row = 36;
		}
		row = 52;
		col = 1;
		bet = 3;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][0]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][0]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][1]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][1]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][2]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][2]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][3]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][3]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][4]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][4]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][5]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][5]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][6]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][6]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][7]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetRp[street][bet][k][7]), row, col++);
			row = 52;
		}
	}

	static boolean betsByStreetGUI = false;

	static void betsByStreet(PlayerBetSize pbs) {
		JTable table = null;
		if (!betsByStreetGUI) {
			betsByStreetGUI = true;
			final var ff = new Font(Font.SERIF, Font.BOLD, 18);
			final var frame = new JFrame("Bets by street");
			frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
			frame.setLocation(50, 50);
			frame.setPreferredSize(new Dimension(1000, 900));
			final var tableModel = new DefaultTableModel(dataBetsByStreet, columnsBet);
			table = new JTable(tableModel);
			table.setFont(ff);
			table.setRowHeight(30);
			// Create a custom cell renderer to set the font to bold 18.
			DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
			renderer.setFont(new Font(Font.SERIF, Font.BOLD, 18));

			// Apply the custom cell renderer to all table cells.
			for (int i = 0; i < table.getColumnCount(); i++) {
				table.getColumnModel().getColumn(i).setCellRenderer(renderer);
			}
			final var pane = new JScrollPane(table);
			table.getColumnModel().getColumn(0).setPreferredWidth(120);
			frame.add(pane);
			frame.pack();
			frame.setVisible(true);
		}

		int street = PREFLOP;
		int row = 1;
		int col = 1;
		for (int bet = 0; bet < BETS_MAX; bet++) {
			System.out.println("//XXX " + bet);
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayAverageFold[street][bet]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_countsStreetBetFold[street][bet]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayAverageCheck[street][bet]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_countsStreetBetCheck[street][bet]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayAverageBet[street][bet]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_countsStreetBetBet[street][bet]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayAverageCall[street][bet]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_countsStreetBetCall[street][bet]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSize$ArrayAverageFold[street][bet]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSize$ArrayAverageCheck[street][bet]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSize$ArrayAverageBet[street][bet]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_countsStreetBetCall[street][bet]), row, col++);
			row = 1;
		}
		street = FLOP;
		row = 14;
		col = 1;
		for (int bet = 0; bet < BETS_MAX; bet++) {
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayAverageFold[street][bet]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_countsStreetBetFold[street][bet]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayAverageCheck[street][bet]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_countsStreetBetCheck[street][bet]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayAverageBet[street][bet]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_countsStreetBetBet[street][bet]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayAverageCall[street][bet]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_countsStreetBetCall[street][bet]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSize$ArrayAverageFold[street][bet]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSize$ArrayAverageCheck[street][bet]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSize$ArrayAverageBet[street][bet]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_countsStreetBetCall[street][bet]), row, col++);
			row = 14;
		}
		street = TURN;
		row = 27;
		col = 1;
		for (int bet = 0; bet < BETS_MAX; bet++) {
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayAverageFold[street][bet]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_countsStreetBetFold[street][bet]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayAverageCheck[street][bet]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_countsStreetBetCheck[street][bet]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayAverageBet[street][bet]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_countsStreetBetBet[street][bet]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayAverageCall[street][bet]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_countsStreetBetCall[street][bet]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSize$ArrayAverageFold[street][bet]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSize$ArrayAverageCheck[street][bet]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSize$ArrayAverageBet[street][bet]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_countsStreetBetCall[street][bet]), row, col++);
			row = 27;
		}
		street = RIVER;
		row = 40;
		col = 1;
		for (int bet = 0; bet < BETS_MAX; bet++) {
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayAverageFold[street][bet]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_countsStreetBetFold[street][bet]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayAverageCheck[street][bet]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_countsStreetBetCheck[street][bet]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayAverageBet[street][bet]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_countsStreetBetBet[street][bet]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayAverageCall[street][bet]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_countsStreetBetCall[street][bet]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSize$ArrayAverageFold[street][bet]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSize$ArrayAverageCheck[street][bet]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSize$ArrayAverageBet[street][bet]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_countsStreetBetCall[street][bet]), row, col++);
			row = 40;
		}

	}

	static boolean frequencyBetPreflopGUI = false;

	static void frequencyBetPreflop(PlayerBetSize pbs) {
		JTable table = null;
		if (!frequencyBetPreflopGUI) {
			frequencyBetPreflopGUI = true;
			final var ff = new Font(Font.SERIF, Font.BOLD, 18);
			final var frame = new JFrame("Preflop Bet");
			frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
			frame.setLocation(50, 50);
			frame.setPreferredSize(new Dimension(1000, 900));
			final var tableModel = new DefaultTableModel(dataBetPreflop, columnsBet);
			table = new JTable(tableModel);
			table.setFont(ff);
			table.setRowHeight(30);
			// Create a custom cell renderer to set the font to bold 18.
			DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
			renderer.setFont(new Font(Font.SERIF, Font.BOLD, 18));

			// Apply the custom cell renderer to all table cells.
			for (int i = 0; i < table.getColumnCount(); i++) {
				table.getColumnModel().getColumn(i).setCellRenderer(renderer);
			}
			final var pane = new JScrollPane(table);
			table.getColumnModel().getColumn(0).setPreferredWidth(120);
			frame.add(pane);
			frame.pack();
			frame.setVisible(true);
		}
		int row = 1;
		int col = 1;
		int street = PREFLOP;
		int bet = 0;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotCheck[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotFold[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotCall[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotBet[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsBet[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsBetCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetIP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetOOP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetMDF[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetMDFCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSize$ArrayPotFold[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSizeCountArrayPotBet[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSizeCountArrayPotBet[street][bet][k]), row, col++);
			row = 1;
		}
		row = 15;
		col = 1;
		bet = 1;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotCheck[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotFold[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotCall[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotBet[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsBet[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsBetCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetIP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetOOP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetMDF[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetMDFCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSize$ArrayPotFold[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSizeCountArrayPotBet[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSizeCountArrayPotBet[street][bet][k]), row, col++);
			row = 15;
		}
		row = 29;
		col = 1;
		bet = 2;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotCheck[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotFold[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotCall[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotBet[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsBet[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsBetCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetIP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetOOP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetMDF[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetMDFCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSize$ArrayPotFold[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSizeCountArrayPotBet[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSizeCountArrayPotBet[street][bet][k]), row, col++);
			row = 29;
		}
		row = 43;
		col = 1;
		bet = 3;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotCheck[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotFold[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotCall[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotBet[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsBet[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsBetCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetIP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetOOP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetMDF[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetMDFCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSize$ArrayPotFold[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSizeCountArrayPotBet[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSizeCountArrayPotBet[street][bet][k]), row, col++);
			row = 43;
		}
	}

	static boolean frequencyBetFlopGUI = false;

	static void frequencyBetFlop(PlayerBetSize pbs) {
		JTable table = null;
		if (!frequencyBetFlopGUI) {
			frequencyBetFlopGUI = true;
			final var ff = new Font(Font.SERIF, Font.BOLD, 18);
			final var frame = new JFrame("Flop Bet");
			frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
			frame.setLocation(50, 50);
			frame.setPreferredSize(new Dimension(1000, 900));
			final var tableModel = new DefaultTableModel(dataBetFlop, columnsBet);
			table = new JTable(tableModel);
			table.setFont(ff);
			table.setRowHeight(30);
			// Create a custom cell renderer to set the font to bold 18.
			DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
			renderer.setFont(new Font(Font.SERIF, Font.BOLD, 18));

			// Apply the custom cell renderer to all table cells.
			for (int i = 0; i < table.getColumnCount(); i++) {
				table.getColumnModel().getColumn(i).setCellRenderer(renderer);
			}
			final var pane = new JScrollPane(table);
			table.getColumnModel().getColumn(0).setPreferredWidth(120);
			frame.add(pane);
			frame.pack();
			frame.setVisible(true);
		}
		int row = 1;
		int col = 1;
		int street = FLOP;
		int bet = 0;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotCheck[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotFold[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotCall[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotBet[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsBet[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsBetCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetIP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetOOP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetMDF[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetMDFCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSize$ArrayPotFold[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSizeCountArrayPotBet[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSizeCountArrayPotBet[street][bet][k]), row, col++);
			row = 1;
		}
		row = 15;
		col = 1;
		bet = 1;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotCheck[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotFold[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotCall[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotBet[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsBet[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsBetCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetIP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetOOP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetMDF[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetMDFCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSize$ArrayPotFold[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSizeCountArrayPotBet[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSizeCountArrayPotBet[street][bet][k]), row, col++);
			row = 15;
		}
		row = 29;
		col = 1;
		bet = 2;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotCheck[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotFold[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotCall[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotBet[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsBet[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsBetCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetIP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetOOP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetMDF[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetMDFCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSize$ArrayPotFold[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSizeCountArrayPotBet[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSizeCountArrayPotBet[street][bet][k]), row, col++);
			row = 29;
		}
		row = 43;
		col = 1;
		bet = 3;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotCheck[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotFold[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotCall[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotBet[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsBet[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsBetCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetIP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetOOP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetMDF[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetMDFCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSize$ArrayPotFold[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSizeCountArrayPotBet[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSizeCountArrayPotBet[street][bet][k]), row, col++);
			row = 43;
		}
	}

	static boolean frequencyBetTurnGUI = false;

	static void frequencyBetTurn(PlayerBetSize pbs) {
		JTable table = null;
		if (!frequencyBetTurnGUI) {
			frequencyBetTurnGUI = true;
			final var ff = new Font(Font.SERIF, Font.BOLD, 18);
			final var frame = new JFrame("Turn Bet");
			frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
			frame.setLocation(50, 50);
			frame.setPreferredSize(new Dimension(1000, 900));
			final var tableModel = new DefaultTableModel(dataBetTurn, columnsBet);
			table = new JTable(tableModel);
			table.setFont(ff);
			table.setRowHeight(30);
			// Create a custom cell renderer to set the font to bold 18.
			DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
			renderer.setFont(new Font(Font.SERIF, Font.BOLD, 18));

			// Apply the custom cell renderer to all table cells.
			for (int i = 0; i < table.getColumnCount(); i++) {
				table.getColumnModel().getColumn(i).setCellRenderer(renderer);
			}
			final var pane = new JScrollPane(table);
			table.getColumnModel().getColumn(0).setPreferredWidth(120);
			frame.add(pane);
			frame.pack();
			frame.setVisible(true);
		}
		int row = 1;
		int col = 1;
		int street = TURN;
		int bet = 0;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotCheck[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotFold[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotCall[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotBet[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsBet[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsBetCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetIP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetOOP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetMDF[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetMDFCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSize$ArrayPotFold[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSizeCountArrayPotBet[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSizeCountArrayPotBet[street][bet][k]), row, col++);
			row = 1;
		}
		row = 15;
		col = 1;
		bet = 1;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotCheck[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotFold[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotCall[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotBet[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsBet[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsBetCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetIP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetOOP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetMDF[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetMDFCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSize$ArrayPotFold[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSizeCountArrayPotBet[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSizeCountArrayPotBet[street][bet][k]), row, col++);
			row = 15;
		}
		row = 29;
		col = 1;
		bet = 2;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotCheck[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotFold[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotCall[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotBet[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsBet[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsBetCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetIP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetOOP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetMDF[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetMDFCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSize$ArrayPotFold[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSizeCountArrayPotBet[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSizeCountArrayPotBet[street][bet][k]), row, col++);
			row = 29;
		}
		row = 43;
		col = 1;
		bet = 3;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotCheck[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotFold[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotCall[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotBet[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsBet[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsBetCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetIP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetOOP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetMDF[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetMDFCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSize$ArrayPotFold[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSizeCountArrayPotBet[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSizeCountArrayPotBet[street][bet][k]), row, col++);
			row = 43;
		}
	}

	static boolean frequencyBetRiverGUI = false;

	static void frequencyBetRiver(PlayerBetSize pbs) {
		JTable table = null;
		if (!frequencyBetRiverGUI) {
			frequencyBetRiverGUI = true;
			final var ff = new Font(Font.SERIF, Font.BOLD, 18);
			final var frame = new JFrame("River Bet");
			frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
			frame.setLocation(50, 50);
			frame.setPreferredSize(new Dimension(1000, 900));
			final var tableModel = new DefaultTableModel(dataBetRiver, columnsBet);
			table = new JTable(tableModel);
			table.setFont(ff);
			table.setRowHeight(30);
			// Create a custom cell renderer to set the font to bold 18.
			DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
			renderer.setFont(new Font(Font.SERIF, Font.BOLD, 18));

			// Apply the custom cell renderer to all table cells.
			for (int i = 0; i < table.getColumnCount(); i++) {
				table.getColumnModel().getColumn(i).setCellRenderer(renderer);
			}
			final var pane = new JScrollPane(table);
			table.getColumnModel().getColumn(0).setPreferredWidth(120);
			frame.add(pane);
			frame.pack();
			frame.setVisible(true);
		}
		int row = 1;
		int col = 1;
		int street = RIVER;
		int bet = 0;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotCheck[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotFold[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotCall[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotBet[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsBet[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsBetCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetIP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetOOP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetMDF[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetMDFCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSize$ArrayPotFold[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSizeCountArrayPotBet[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSizeCountArrayPotBet[street][bet][k]), row, col++);
			row = 1;
		}
		row = 15;
		col = 1;
		bet = 1;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotCheck[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotFold[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotCall[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotBet[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsBet[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsBetCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetIP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetOOP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetMDF[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetMDFCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSize$ArrayPotFold[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSizeCountArrayPotBet[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSizeCountArrayPotBet[street][bet][k]), row, col++);
			row = 15;
		}
		row = 29;
		col = 1;
		bet = 2;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotCheck[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotFold[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotCall[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotBet[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsBet[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsBetCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetIP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetOOP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetMDF[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetMDFCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSize$ArrayPotFold[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSizeCountArrayPotBet[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSizeCountArrayPotBet[street][bet][k]), row, col++);
			row = 29;
		}
		row = 43;
		col = 1;
		bet = 3;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotCheck[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotFold[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotCall[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_BetSizeCountArrayPotBet[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsBet[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsBetCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetIP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetOOP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetMDF[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerBetMDFCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSize$ArrayPotFold[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSizeCountArrayPotBet[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSizeCountArrayPotBet[street][bet][k]), row, col++);
			row = 43;
		}
	}

	static boolean frequencyCallPreflopGUI = false;

	static void frequencyCallPreflop(PlayerBetSize pbs) {
		JTable table = null;
		if (!frequencyCallPreflopGUI) {
			frequencyCallPreflopGUI = true;
			final var ff = new Font(Font.SERIF, Font.BOLD, 18);
			final var frame = new JFrame("Preflop Call");
			frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
			frame.setLocation(50, 150);
			frame.setPreferredSize(new Dimension(1000, 900));
			final var tableModel = new DefaultTableModel(dataCallPreflop, columnsBet);
			table = new JTable(tableModel);
			table.setFont(ff);
			table.setRowHeight(30);
			// Create a custom cell renderer to set the font to bold 18.
			DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
			renderer.setFont(new Font(Font.SERIF, Font.BOLD, 18));

			// Apply the custom cell renderer to all table cells.
			for (int i = 0; i < table.getColumnCount(); i++) {
				table.getColumnModel().getColumn(i).setCellRenderer(renderer);
			}
			final var pane = new JScrollPane(table);
			table.getColumnModel().getColumn(0).setPreferredWidth(120);
			frame.add(pane);
			frame.pack();
			frame.setVisible(true);
		}

		int row = 1;
		int col = 1;
		int street = PREFLOP;
		int bet = 0;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsCall[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsCallCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallIP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallOOP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallMDFCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallMDFCountActual[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSize$ArrayPotCall[street][bet][k]), row, col++);
			row = 1;
		}
		row = 9;
		col = 1;
		bet = 1;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsCall[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsCallCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallIP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallOOP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallMDFCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallMDFCountActual[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSize$ArrayPotCall[street][bet][k]), row, col++);
			row = 9;
		}
		row = 17;
		col = 1;
		bet = 2;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsCall[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsCallCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallIP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallOOP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallMDFCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallMDFCountActual[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSize$ArrayPotCall[street][bet][k]), row, col++);
			row = 17;
		}
		row = 25;
		col = 1;
		bet = 3;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsCall[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsCallCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallIP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallOOP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallMDFCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallMDFCountActual[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSize$ArrayPotCall[street][bet][k]), row, col++);
			row = 25;
		}
	}

	static boolean frequencyCallFlopGUI = false;

	static void frequencyCallFlop(PlayerBetSize pbs) {
		JTable table = null;
		if (!frequencyCallFlopGUI) {
			frequencyCallFlopGUI = true;
			final var ff = new Font(Font.SERIF, Font.BOLD, 18);
			final var frame = new JFrame("Flop Call");
			frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
			frame.setLocation(50, 150);
			frame.setPreferredSize(new Dimension(1000, 900));
			final var tableModel = new DefaultTableModel(dataCallFlop, columnsBet);
			table = new JTable(tableModel);
			table.setFont(ff);
			table.setRowHeight(30);
			// Create a custom cell renderer to set the font to bold 18.
			DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
			renderer.setFont(new Font(Font.SERIF, Font.BOLD, 18));

			// Apply the custom cell renderer to all table cells.
			for (int i = 0; i < table.getColumnCount(); i++) {
				table.getColumnModel().getColumn(i).setCellRenderer(renderer);
			}
			final var pane = new JScrollPane(table);
			table.getColumnModel().getColumn(0).setPreferredWidth(120);
			frame.add(pane);
			frame.pack();
			frame.setVisible(true);
		}

		int row = 1;
		int col = 1;
		int street = FLOP;
		int bet = 0;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsCall[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsCallCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallIP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallOOP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallMDFCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallMDFCountActual[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSize$ArrayPotCall[street][bet][k]), row, col++);
			row = 1;
		}
		row = 9;
		col = 1;
		bet = 1;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsCall[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsCallCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallIP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallOOP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallMDFCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallMDFCountActual[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSize$ArrayPotCall[street][bet][k]), row, col++);
			row = 9;
		}
		row = 17;
		col = 1;
		bet = 2;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsCall[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsCallCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallIP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallOOP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallMDFCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallMDFCountActual[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSize$ArrayPotCall[street][bet][k]), row, col++);
			row = 17;
		}
		row = 25;
		col = 1;
		bet = 3;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsCall[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsCallCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallIP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallOOP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallMDFCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallMDFCountActual[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSize$ArrayPotCall[street][bet][k]), row, col++);
			row = 25;
		}
	}

	static boolean frequencyCallTurnGUI = false;

	static void frequencyCallTurn(PlayerBetSize pbs) {
		JTable table = null;
		if (!frequencyCallTurnGUI) {
			frequencyCallTurnGUI = true;
			final var ff = new Font(Font.SERIF, Font.BOLD, 18);
			final var frame = new JFrame("Turn Call");
			frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
			frame.setLocation(50, 150);
			frame.setPreferredSize(new Dimension(1000, 900));
			final var tableModel = new DefaultTableModel(dataCallTurn, columnsBet);
			table = new JTable(tableModel);
			table.setFont(ff);
			table.setRowHeight(30);
			// Create a custom cell renderer to set the font to bold 18.
			DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
			renderer.setFont(new Font(Font.SERIF, Font.BOLD, 18));

			// Apply the custom cell renderer to all table cells.
			for (int i = 0; i < table.getColumnCount(); i++) {
				table.getColumnModel().getColumn(i).setCellRenderer(renderer);
			}
			final var pane = new JScrollPane(table);
			table.getColumnModel().getColumn(0).setPreferredWidth(120);
			frame.add(pane);
			frame.pack();
			frame.setVisible(true);
		}

		int row = 1;
		int col = 1;
		int street = TURN;
		int bet = 0;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsCall[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsCallCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallIP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallOOP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallMDFCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallMDFCountActual[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSize$ArrayPotCall[street][bet][k]), row, col++);
			row = 1;
		}
		row = 9;
		col = 1;
		bet = 1;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsCall[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsCallCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallIP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallOOP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallMDFCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallMDFCountActual[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSize$ArrayPotCall[street][bet][k]), row, col++);
			row = 9;
		}
		row = 17;
		col = 1;
		bet = 2;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsCall[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsCallCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallIP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallOOP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallMDFCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallMDFCountActual[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSize$ArrayPotCall[street][bet][k]), row, col++);
			row = 17;
		}
		row = 25;
		col = 1;
		bet = 3;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsCall[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsCallCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallIP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallOOP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallMDFCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallMDFCountActual[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSize$ArrayPotCall[street][bet][k]), row, col++);
			row = 25;
		}
	}

	static boolean frequencyCallRiverGUI = false;

	static void frequencyCallRiver(PlayerBetSize pbs) {
		JTable table = null;
		if (!frequencyCallRiverGUI) {
			frequencyCallRiverGUI = true;
			final var ff = new Font(Font.SERIF, Font.BOLD, 18);
			final var frame = new JFrame("River Call");
			frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
			frame.setLocation(50, 150);
			frame.setPreferredSize(new Dimension(1000, 900));
			final var tableModel = new DefaultTableModel(dataCallRiver, columnsBet);
			table = new JTable(tableModel);
			table.setFont(ff);
			table.setRowHeight(30);
			// Create a custom cell renderer to set the font to bold 18.
			DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
			renderer.setFont(new Font(Font.SERIF, Font.BOLD, 18));

			// Apply the custom cell renderer to all table cells.
			for (int i = 0; i < table.getColumnCount(); i++) {
				table.getColumnModel().getColumn(i).setCellRenderer(renderer);
			}
			final var pane = new JScrollPane(table);
			table.getColumnModel().getColumn(0).setPreferredWidth(120);
			frame.add(pane);
			frame.pack();
			frame.setVisible(true);
		}

		int row = 1;
		int col = 1;
		int street = RIVER;
		int bet = 0;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsCall[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsCallCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallIP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallOOP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallMDFCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallMDFCountActual[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSize$ArrayPotCall[street][bet][k]), row, col++);
			row = 1;
		}
		row = 9;
		col = 1;
		bet = 1;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsCall[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsCallCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallIP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallOOP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallMDFCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallMDFCountActual[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSize$ArrayPotCall[street][bet][k]), row, col++);
			row = 9;
		}
		row = 17;
		col = 1;
		bet = 2;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsCall[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsCallCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallIP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallOOP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallMDFCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallMDFCountActual[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSize$ArrayPotCall[street][bet][k]), row, col++);
			row = 17;
		}
		row = 25;
		col = 1;
		bet = 3;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsCall[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerPotOddsCallCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallIP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallOOP[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallMDFCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerCallMDFCountActual[street][bet][k]), row++, col);
			table.setValueAt(Format.format$(pbs.betSize_BetSize$ArrayPotCall[street][bet][k]), row, col++);
			row = 25;
		}
	}

	static boolean frequencyByStreetBetAndStepPreflopGUI;

	static void frequencyByStreetBetAndStepPreflop(PlayerBetSize pbs) {
		JTable table = null;
		if (!frequencyByStreetBetAndStepPreflopGUI) {
			frequencyByStreetBetAndStepPreflopGUI = true;
			final var ff = new Font(Font.SERIF, Font.BOLD, 18);
			final var frame = new JFrame("Preflop Frequency  ");
			frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
			frame.setLocation(50, 50);
			frame.setPreferredSize(new Dimension(1000, 900));
			final var tableModel = new DefaultTableModel(dataFreqStepsPreflop, columnsFreqSteps);
			table = new JTable(tableModel);
			table.setFont(ff);
			table.setRowHeight(30);
			// Create a custom cell renderer to set the font to bold 18.
			DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
			renderer.setFont(new Font(Font.SERIF, Font.BOLD, 18));

			// Apply the custom cell renderer to all table cells.
			for (int i = 0; i < table.getColumnCount(); i++) {
				table.getColumnModel().getColumn(i).setCellRenderer(renderer);
			}
			final var pane = new JScrollPane(table);
			table.getColumnModel().getColumn(0).setPreferredWidth(120);
			frame.add(pane);
			frame.pack();
			frame.setVisible(true);
		}
		int row = 0;
		int col = 1;
		int street = PREFLOP;
		int bet = 0;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_playerFacingBetCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerResponseFoldCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerResponseCallCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerResponseBetCount[street][bet][k]), row, col++);
			row = 0;
		}
		bet = 1;
		row = 5;
		col = 1;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_playerFacingBetCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerResponseFoldCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerResponseCallCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerResponseBetCount[street][bet][k]), row, col++);
			row = 5;
		}
		bet = 2;
		row = 10;
		col = 1;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_playerFacingBetCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerResponseFoldCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerResponseCallCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerResponseBetCount[street][bet][k]), row, col++);
			row = 10;
		}
		bet = 3;
		row = 15;
		col = 1;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_playerFacingBetCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerResponseFoldCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerResponseCallCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerResponseBetCount[street][bet][k]), row, col++);
			row = 15;
		}
	}

	static boolean frequencyByStreetBetAndStepFlopGUI;

	static void frequencyByStreetBetAndStepFlop(PlayerBetSize pbs) {
		JTable table = null;
		if (!frequencyByStreetBetAndStepFlopGUI) {
			frequencyByStreetBetAndStepFlopGUI = true;
			final var ff = new Font(Font.SERIF, Font.BOLD, 18);
			final var frame = new JFrame("Flop Frequency  ");
			frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
			frame.setLocation(50, 100);
			frame.setPreferredSize(new Dimension(1000, 900));
			final var tableModel = new DefaultTableModel(dataFreqStepsFlop, columnsFreqSteps);
			table = new JTable(tableModel);
			table.setFont(ff);
			table.setRowHeight(30);
			// Create a custom cell renderer to set the font to bold 18.
			DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
			renderer.setFont(new Font(Font.SERIF, Font.BOLD, 18));

			// Apply the custom cell renderer to all table cells.
			for (int i = 0; i < table.getColumnCount(); i++) {
				table.getColumnModel().getColumn(i).setCellRenderer(renderer);
			}
			final var pane = new JScrollPane(table);
			table.getColumnModel().getColumn(0).setPreferredWidth(120);
			frame.add(pane);
			frame.pack();
			frame.setVisible(true);
		}
		int row = 0;
		int col = 1;
		int street = FLOP;
		int bet = 0;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_playerFacingBetCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerResponseFoldCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerResponseCallCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerResponseBetCount[street][bet][k]), row, col++);
			row = 0;
		}
		bet = 1;
		row = 5;
		col = 1;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_playerFacingBetCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerResponseFoldCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerResponseCallCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerResponseBetCount[street][bet][k]), row, col++);
			row = 5;
		}
		bet = 2;
		row = 10;
		col = 1;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_playerFacingBetCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerResponseFoldCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerResponseCallCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerResponseBetCount[street][bet][k]), row, col++);
			row = 10;
		}
		bet = 3;
		row = 15;
		col = 1;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_playerFacingBetCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerResponseFoldCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerResponseCallCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerResponseBetCount[street][bet][k]), row, col++);
			row = 15;
		}
	}

	static boolean frequencyByStreetBetAndStepTurnGUI;

	static void frequencyByStreetBetAndStepTurn(PlayerBetSize pbs) {
		JTable table = null;
		if (!frequencyByStreetBetAndStepTurnGUI) {
			frequencyByStreetBetAndStepTurnGUI = true;
			final var ff = new Font(Font.SERIF, Font.BOLD, 18);
			final var frame = new JFrame("Turn Frequency  ");
			frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
			frame.setLocation(50, 150);
			frame.setPreferredSize(new Dimension(1000, 900));
			final var tableModel = new DefaultTableModel(dataFreqStepsTurn, columnsFreqSteps);
			table = new JTable(tableModel);
			table.setFont(ff);
			table.setRowHeight(30);
			// Create a custom cell renderer to set the font to bold 18.
			DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
			renderer.setFont(new Font(Font.SERIF, Font.BOLD, 18));

			// Apply the custom cell renderer to all table cells.
			for (int i = 0; i < table.getColumnCount(); i++) {
				table.getColumnModel().getColumn(i).setCellRenderer(renderer);
			}
			final var pane = new JScrollPane(table);
			table.getColumnModel().getColumn(0).setPreferredWidth(120);
			frame.add(pane);
			frame.pack();
			frame.setVisible(true);
		}
		int row = 0;
		int col = 1;
		int street = TURN;
		int bet = 0;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_playerFacingBetCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerResponseFoldCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerResponseCallCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerResponseBetCount[street][bet][k]), row, col++);
			row = 0;
		}
		bet = 1;
		row = 5;
		col = 1;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_playerFacingBetCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerResponseFoldCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerResponseCallCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerResponseBetCount[street][bet][k]), row, col++);
			row = 5;
		}
		bet = 2;
		row = 10;
		col = 1;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_playerFacingBetCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerResponseFoldCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerResponseCallCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerResponseBetCount[street][bet][k]), row, col++);
			row = 10;
		}
		bet = 3;
		row = 15;
		col = 1;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_playerFacingBetCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerResponseFoldCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerResponseCallCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerResponseBetCount[street][bet][k]), row, col++);
			row = 15;
		}
	}

	static boolean frequencyByStreetBetAndStepPreflopXGUI;

	static void frequencyByStreetBetAndStepPreflopX(PlayerBetSize pbs) {
		JTable table = null;
		if (!frequencyByStreetBetAndStepPreflopGUI) {
			frequencyByStreetBetAndStepPreflopGUI = true;
			final var ff = new Font(Font.SERIF, Font.BOLD, 18);
			final var frame = new JFrame("River Frequency  ");
			frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
			frame.setLocation(50, 50);
			frame.setPreferredSize(new Dimension(1000, 900));
			final var tableModel = new DefaultTableModel(dataFreqStepsPreflop, columnsFreqSteps);
			table = new JTable(tableModel);
			table.setFont(ff);
			table.setRowHeight(30);
			// Create a custom cell renderer to set the font to bold 18.
			DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
			renderer.setFont(new Font(Font.SERIF, Font.BOLD, 18));

			// Apply the custom cell renderer to all table cells.
			for (int i = 0; i < table.getColumnCount(); i++) {
				table.getColumnModel().getColumn(i).setCellRenderer(renderer);
			}
			final var pane = new JScrollPane(table);
			table.getColumnModel().getColumn(0).setPreferredWidth(120);
			frame.add(pane);
			frame.pack();
			frame.setVisible(true);
		}
		int row = 0;
		int col = 1;
		int street = PREFLOP;
		int bet = 0;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_playerFacingBetCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerResponseFoldCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerResponseCallCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerResponseBetCount[street][bet][k]), row, col++);
			row = 0;
		}
		bet = 1;
		row = 5;
		col = 1;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_playerFacingBetCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerResponseFoldCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerResponseCallCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerResponseBetCount[street][bet][k]), row, col++);
			row = 5;
		}
		bet = 2;
		row = 10;
		col = 1;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_playerFacingBetCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerResponseFoldCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerResponseCallCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerResponseBetCount[street][bet][k]), row, col++);
			row = 10;
		}
		bet = 3;
		row = 15;
		col = 1;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_playerFacingBetCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerResponseFoldCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerResponseCallCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerResponseBetCount[street][bet][k]), row, col++);
			row = 15;
		}
	}

	static boolean frequencyByStreetBetAndStepRiverGUI;

	static void frequencyByStreetBetAndStepRiver(PlayerBetSize pbs) {
		JTable table = null;
		if (!frequencyByStreetBetAndStepRiverGUI) {
			frequencyByStreetBetAndStepRiverGUI = true;
			final var ff = new Font(Font.SERIF, Font.BOLD, 18);
			final var frame = new JFrame("Frequency   by street, bet type, and steps");
			frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
			frame.setLocation(50, 200);
			frame.setPreferredSize(new Dimension(1000, 900));
			final var tableModel = new DefaultTableModel(dataFreqStepsRiver, columnsFreqSteps);
			table = new JTable(tableModel);
			table.setFont(ff);
			table.setRowHeight(30);
			// Create a custom cell renderer to set the font to bold 18.
			DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
			renderer.setFont(new Font(Font.SERIF, Font.BOLD, 18));

			// Apply the custom cell renderer to all table cells.
			for (int i = 0; i < table.getColumnCount(); i++) {
				table.getColumnModel().getColumn(i).setCellRenderer(renderer);
			}
			final var pane = new JScrollPane(table);
			table.getColumnModel().getColumn(0).setPreferredWidth(120);
			frame.add(pane);
			frame.pack();
			frame.setVisible(true);
		}
		int row = 0;
		int col = 1;
		int street = RIVER;
		int bet = 0;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_playerFacingBetCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerResponseFoldCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerResponseCallCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerResponseBetCount[street][bet][k]), row, col++);
			row = 0;
		}
		bet = 1;
		row = 5;
		col = 1;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_playerFacingBetCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerResponseFoldCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerResponseCallCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerResponseBetCount[street][bet][k]), row, col++);
			row = 5;
		}
		bet = 2;
		row = 10;
		col = 1;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_playerFacingBetCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerResponseFoldCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerResponseCallCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerResponseBetCount[street][bet][k]), row, col++);
			row = 10;
		}
		bet = 3;
		row = 15;
		col = 1;
		for (int k = 0; k < BET_SIZE_POT_MAX; ++k) {
			table.setValueAt(Format.format(pbs.betSize_playerFacingBetCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerResponseFoldCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerResponseCallCount[street][bet][k]), row++, col);
			table.setValueAt(Format.format(pbs.betSize_playerResponseBetCount[street][bet][k]), row, col++);
			row = 15;
		}
	}

}
